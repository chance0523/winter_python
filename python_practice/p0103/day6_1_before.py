# 클래스 : 특별한 자료구조
# 관련 키워드 => OOP, 인스턴스=객체
# 기본자료형(숫자, 문자열, 불른)
# 콜렉션형 (리스트, 집합, 튜플, 딕셔너리)
# 클래스 ( 속성, 함수 ...) => 틀
# 인스턴스=객체=Object
#   => 클래스에 의해서 만들어진 산출물

# 클래스 생성 문법
# 클래스이름은 첫글자는 대문자로 지정
# class 클래스이름:
#   명령문


# 인스턴스 생성하기
# 인스턴스명은 첫글자는 소문자로 지정
# 인스턴스변수 = 클래스이름()
# isinstance(인스턴스변수, 클래스이름)
# 특정클래스에 의해서 생성된 인스턴스가 맞는지 출력
# True / False 로 출력


# 생성자 함수 (Constructor)
# => 속성값 정의
# 사각형에 관련된 클래스 속성 => 가로, 세로, 색상
# 사람에 대한 클래스 속성 => 이름, 성별, 키, 몸무게
# 붕어빵에 대한 클래스 속성 => 재료, 생산시간

# 생성자함수 문법
# class 클래스명:
#   def __init__(self, 인자):
#       self.인자 = 인자값
# 인스턴스 생성
# 인스턴스명 = 클래스이름(인자값,..)
# 실제 속성값 출력
# 인스턴스명.속성


# 클래스 메소드란?
# def 메소드이름(self,인자):
#   명령어
#   return 값
# 메소드 호출
# 인스턴스명.메소드이름(인자)


'''
퀴즈 : 
    1. 타원 클래스 생성 
    2. 속성 : ?
    3. 속성을 출력하는 메소드 정의
    4. 타원의 면적을 출력하는 메소드 정의 : 3.14*반지름**2 
    5. 인스턴화 
    6. 속성과 면적 메소드 호출 
'''


# 퀴즈 : 계산기 만들기
# 2개의 숫자를 속성으로 가진 계산기 클래스 만들기
# 인스턴스화 시킨 후 다음과 같이 출력한다
#
# [ 출력형태 : ]
# 첫번째 숫자 : ?
# 두번째 숫자 : ?
# 더하기 : ?
# 빼기 : ?
# 곱하기 : ?
# 나누기 : ?

# 클래스 선언 -  Calculator
# 생성자함수를 이용하여 속성 정의
# 더하기 메소드 정의
# 빼기 메소드 정의
# 곱하기 메소드 정의
# 나누기 메소드 정의
# 클래스를 이용하여 인스턴스 생성
# 출력형태로 메소드 호출하여 출력



# ---------------
# 상속이란?
# 부모클래스의 속성이랑 메소드를 그대로 가진다.
# class 클래스이름(부모클래스1,부모클래스2...)

# 부모클래스1 - 아파트, 차
# 부모클래스2 - 오피스텔, 전동스쿠터
# 자식클래스 - 아파트, 차 , 오피스텔, 전동스쿠터



# 부모 클래스와 자식 클래스의 관계 확인
# issubclass(자식클래스,부모클래스)
# : 자식클래스와 부모 클래스와의 관계 표시 (True / False)

# 부모 클래스 정보 표시
# 클래스명.__bases__ => 튜플 형태


# 인스턴스가 접근할 수 있는 속성과 메소드
# dir(인스턴스명)


# 메서드 오버라이딩(method overriding)
# 상속 관계에서 부모클래스(Super Class)의 메서드에 대하여 자식클래스(Sub Class)에서 재정의하는 기능
# 오버라이딩된 메서드 외에 부모의 메서드를 호출하려면 super() 키워드 이용
# super().메서드()

