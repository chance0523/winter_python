# 정규표현식 (Regular Expression)
# 유효성 검사
# 특정 문자열이 특정 조건(패턴)에 맞는지 검사

# 파이썬에서 정규표현식 모듈 => re (내장모듈)
import re

# 정규표현식 패턴 - 대문자, 소문자, 숫자, 한글
# [문자클래스스타일]  => 한글씩
# [문자클래스스타일]+ => 단어단위
# [a-z] : 영어소문자
# [A-Z] : 영어대문자
# [0-9] : 숫자
# [가-힣] : 한글

# 정규표현식 패턴 - 대문자, 소문자, 숫자 : \지원문자
# [\d] : 10진수, [0-9]와같음
# [\D]: 10진수외 [^0-9]
# [\s] :공백문자, [ \t\n\r\f\v]
# [\S]: 공백 문자 외, [ \t\n\r\f\v]
# [\w] : 영문자숫자 , [a-zA-Z0-9]
# [\W]: 영문자숫자외 , [^a-zA-Z0-9]

# 정규표현식 패턴객체 생성
# re.compile(패턴식)


# 정규표현식을 사용한 문자열 검색 메서드
# 패턴객체.match(문자열) : 문자열 처음부터 검색
# 패턴객체.search(문자열) : 문자열 전체 검색
# 패턴객체.findall(문자열) : 정규식과 매치되는 문자열을 리스트로 반환
# 패턴객체.finditer(문자열) : 정규식과 매치되는 문자열을 반복가능한 객체로 반환


# Match object 메서드
# group() : 매치된 문자열을 리턴한다.
# start() : 매치된 문자열의 시작 위치를 돌려준다.
# end() : 매치된 문자열의 끝 위치를 돌려준다.
# span() : 매치된 문자열의 시작,끝 위치를 튜플 형태로 돌려준다.




# 정규표현식 컴파일 옵션
# re.compile(정규표현식, re.컴파일옵션)
# S : dotall 줄바꿈문자 포함
# I : ignorecase  대소문자 관계없이 매치
# M : multiline 여러줄과 매치한다
# v : verbose 모드 이용. 여러줄 정규식과 주석 사용 가능


# 정규표현식 메타문자
# | : OR 또는
# +:바로 앞의 문자가 하나 이상 있음
# ^:문자열의 처음을 나타냄
# $:문자열의 끝
# . :임의의 문자가 와도 됨
# *:바로 앞의 문자가 없거나 하나 이상 있음
# ?:앞의 문자가 없거나 하나임



# 자릿수 지정 패턴 {}
# {n} n번 반복됨
# {n,} n번 이상 반복됨
# {n, m} 최소 n번 이상 최대 m 번 이하로 반복됨
# x* : 문자열X가 0번이상 반복
# re.findall(패턴식, 문자열)